//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Lab8WindowsForms
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class lesyukEntities : DbContext
    {
        public lesyukEntities()
            : base("name=lesyukEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Address_c> Address_c { get; set; }
        public virtual DbSet<Customer_adress> Customer_adress { get; set; }
        public virtual DbSet<Customers> Customers { get; set; }
        public virtual DbSet<Hobbi> Hobbi { get; set; }
        public virtual DbSet<HobbyChangeLog> HobbyChangeLog { get; set; }
        public virtual DbSet<Manager> Manager { get; set; }
        public virtual DbSet<Mark_of_product> Mark_of_product { get; set; }
        public virtual DbSet<Product> Product { get; set; }
        public virtual DbSet<Relatives> Relatives { get; set; }
        public virtual DbSet<Customer_hobbi> Customer_hobbi { get; set; }
        public virtual DbSet<database_firewall_rules> database_firewall_rules { get; set; }
    
        [DbFunction("lesyukEntities", "F_GetCustomerAndRelatives")]
        public virtual IQueryable<F_GetCustomerAndRelatives_Result> F_GetCustomerAndRelatives(Nullable<int> customerId)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<F_GetCustomerAndRelatives_Result>("[lesyukEntities].[F_GetCustomerAndRelatives](@CustomerId)", customerIdParameter);
        }
    
        public virtual int InsertDataToProductAndMAnager(string productName, string category, string description, Nullable<int> managerId, string managerPIB, Nullable<System.DateTime> dateOfBirth, string gender, ObjectParameter getManager)
        {
            var productNameParameter = productName != null ?
                new ObjectParameter("ProductName", productName) :
                new ObjectParameter("ProductName", typeof(string));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var managerIdParameter = managerId.HasValue ?
                new ObjectParameter("ManagerId", managerId) :
                new ObjectParameter("ManagerId", typeof(int));
    
            var managerPIBParameter = managerPIB != null ?
                new ObjectParameter("ManagerPIB", managerPIB) :
                new ObjectParameter("ManagerPIB", typeof(string));
    
            var dateOfBirthParameter = dateOfBirth.HasValue ?
                new ObjectParameter("DateOfBirth", dateOfBirth) :
                new ObjectParameter("DateOfBirth", typeof(System.DateTime));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertDataToProductAndMAnager", productNameParameter, categoryParameter, descriptionParameter, managerIdParameter, managerPIBParameter, dateOfBirthParameter, genderParameter, getManager);
        }
    
        public virtual ObjectResult<P_GetCustomers_Result> P_GetCustomers(string firstCity, string secondCiry, string thirdCity, string hobbi, string product1, string product2)
        {
            var firstCityParameter = firstCity != null ?
                new ObjectParameter("firstCity", firstCity) :
                new ObjectParameter("firstCity", typeof(string));
    
            var secondCiryParameter = secondCiry != null ?
                new ObjectParameter("secondCiry", secondCiry) :
                new ObjectParameter("secondCiry", typeof(string));
    
            var thirdCityParameter = thirdCity != null ?
                new ObjectParameter("thirdCity", thirdCity) :
                new ObjectParameter("thirdCity", typeof(string));
    
            var hobbiParameter = hobbi != null ?
                new ObjectParameter("hobbi", hobbi) :
                new ObjectParameter("hobbi", typeof(string));
    
            var product1Parameter = product1 != null ?
                new ObjectParameter("product1", product1) :
                new ObjectParameter("product1", typeof(string));
    
            var product2Parameter = product2 != null ?
                new ObjectParameter("product2", product2) :
                new ObjectParameter("product2", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<P_GetCustomers_Result>("P_GetCustomers", firstCityParameter, secondCiryParameter, thirdCityParameter, hobbiParameter, product1Parameter, product2Parameter);
        }
    
        public virtual int P_UpdateCustomerAndMarkOfProduct(Nullable<int> customerId, Nullable<int> markOfProductId, Nullable<int> mark, string dateOfBirh)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("customerId", customerId) :
                new ObjectParameter("customerId", typeof(int));
    
            var markOfProductIdParameter = markOfProductId.HasValue ?
                new ObjectParameter("markOfProductId", markOfProductId) :
                new ObjectParameter("markOfProductId", typeof(int));
    
            var markParameter = mark.HasValue ?
                new ObjectParameter("mark", mark) :
                new ObjectParameter("mark", typeof(int));
    
            var dateOfBirhParameter = dateOfBirh != null ?
                new ObjectParameter("dateOfBirh", dateOfBirh) :
                new ObjectParameter("dateOfBirh", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("P_UpdateCustomerAndMarkOfProduct", customerIdParameter, markOfProductIdParameter, markParameter, dateOfBirhParameter);
        }
    
        public virtual ObjectResult<P_SelectCustomersReport3_Result> P_SelectCustomersReport3()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<P_SelectCustomersReport3_Result>("P_SelectCustomersReport3");
        }
    }
}
